{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","index.js"],"names":["TodoForm","props","useState","edit","value","input","setInput","inputRef","useRef","useEffect","current","focus","handleSubmit","e","preventDefault","onSubmit","id","Math","floor","random","text","handleChange","target","className","placeholder","onChange","name","ref","onClick","Todo","todos","completeTodo","removeTodo","updateTodo","setEdit","map","todo","index","isComplete","TodoList","setTodos","test","newTodos","updatedTodos","removeArr","filter","todoId","newValue","prev","item","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8MAwDeA,MAtDf,SAAkBC,GAChB,MAA0BC,mBAASD,EAAME,KAAOF,EAAME,KAAKC,MAAQ,IAAnE,mBAAOC,EAAP,KAAcC,EAAd,KACMC,EAAWC,iBAAO,MACxBC,qBAAU,WACRF,EAASG,QAAQC,WAEnB,IAAMC,EAAe,SAACC,GACpBA,EAAEC,iBACFb,EAAMc,SAAS,CACbC,GAAIC,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBC,KAAMf,IAGRC,EAAS,KAGLe,EAAe,SAACR,GACpBP,EAASO,EAAES,OAAOlB,QAEpB,OACE,sBAAMW,SAAUH,EAAcW,UAAU,YAAxC,SACGtB,EAAME,KACL,qCACE,uBACEqB,YAAY,mBACZpB,MAAOC,EACPoB,SAAUJ,EACVK,KAAK,OACLC,IAAKpB,EACLgB,UAAU,oBAEZ,wBAAQK,QAAShB,EAAcW,UAAU,mBAAzC,uBAKF,qCACE,uBACEC,YAAY,aACZpB,MAAOC,EACPoB,SAAUJ,EACVK,KAAK,OACLH,UAAU,aACVI,IAAKpB,IAEP,wBAAQqB,QAAShB,EAAcW,UAAU,cAAzC,4B,eCGKM,MA5Cf,YAAgE,IAAhDC,EAA+C,EAA/CA,MAAOC,EAAwC,EAAxCA,aAAcC,EAA0B,EAA1BA,WAAYC,EAAc,EAAdA,WAC/C,EAAwB/B,mBAAS,CAC/Bc,GAAI,KACJZ,MAAO,KAFT,mBAAOD,EAAP,KAAa+B,EAAb,KAaA,OAAI/B,EAAKa,GACA,cAAC,EAAD,CAAUb,KAAMA,EAAMY,SATV,SAACX,GACpB6B,EAAW9B,EAAKa,GAAIZ,GACpB8B,EAAQ,CACNlB,GAAI,KACJZ,MAAO,QAQJ0B,EAAMK,KAAI,SAACC,EAAMC,GAAP,OACf,sBACEd,UAAWa,EAAKE,WAAa,oBAAsB,WADrD,UAIE,qBAAmBV,QAAS,kBAAMG,EAAaK,EAAKpB,KAApD,SACGoB,EAAKhB,MADEgB,EAAKpB,IAGf,sBAAKO,UAAU,QAAf,UACE,cAAC,IAAD,CACEK,QAAS,WACPI,EAAWI,EAAKpB,KAElBO,UAAU,gBAEZ,cAAC,IAAD,CACEK,QAAS,WACPM,EAAQ,CAAElB,GAAIoB,EAAKpB,GAAIZ,MAAOgC,EAAKhB,QAErCG,UAAU,mBAhBTc,OCsBIE,MA7Cf,WACE,MAA0BrC,mBAAS,IAAnC,mBAAO4B,EAAP,KAAcU,EAAd,KAmCA,OACE,gCACE,4DACA,cAAC,EAAD,CAAUzB,SApCE,SAACqB,GACf,GAAKA,EAAKhB,OAAQ,QAAQqB,KAAKL,EAAKhB,MAApC,CAGA,IAAMsB,EAAQ,CAAIN,GAAJ,mBAAaN,IAE3BU,EAASE,OA+BP,cAAC,EAAD,CAAMZ,MAAOA,EAAOC,aAbH,SAACf,GACpB,IAAI2B,EAAeb,EAAMK,KAAI,SAACC,GAI5B,OAHIA,EAAKpB,KAAOA,IACdoB,EAAKE,YAAcF,EAAKE,YAEnBF,KAETI,EAASG,IAMyCX,WApBjC,SAAChB,GAClB,IAAM4B,EAAY,YAAId,GAAOe,QAAO,SAACT,GAAD,OAAUA,EAAKpB,KAAOA,KAE1DwB,EAASI,IAiBiEX,WA5BzD,SAACa,EAAQC,GACpBA,EAAS3B,OAAQ,QAAQqB,KAAKM,EAAS3B,OAI3CoB,GAAS,SAAAQ,GAAI,OAAIA,EAAKb,KAAI,SAAAc,GAAI,OAAKA,EAAKjC,KAAO8B,EAASC,EAAWE,eCV1DC,MARf,WACE,OACE,qBAAK3B,UAAU,WAAf,SACE,cAAC,EAAD,OCFN4B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.1d91f4cd.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\n\r\nfunction TodoForm(props) {\r\n  const [input, setInput] = useState(props.edit ? props.edit.value : '');\r\n  const inputRef = useRef(null);\r\n  useEffect(() => {\r\n    inputRef.current.focus();\r\n  });\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    props.onSubmit({\r\n      id: Math.floor(Math.random() * 10000),\r\n      text: input,\r\n    });\r\n\r\n    setInput(\"\");\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    setInput(e.target.value);\r\n  };\r\n  return (\r\n    <form onSubmit={handleSubmit} className='todo_form'>\r\n      {props.edit ? (\r\n        <>\r\n          <input\r\n            placeholder='Update your item'\r\n            value={input}\r\n            onChange={handleChange}\r\n            name='text'\r\n            ref={inputRef}\r\n            className='todo_input edit'\r\n          />\r\n          <button onClick={handleSubmit} className='todo_button edit'>\r\n            Update\r\n          </button>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <input\r\n            placeholder='Add a todo'\r\n            value={input}\r\n            onChange={handleChange}\r\n            name='text'\r\n            className='todo_input'\r\n            ref={inputRef}\r\n          />\r\n          <button onClick={handleSubmit} className='todo_button'>\r\n            Add todo\r\n          </button>\r\n        </>\r\n      )}\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default TodoForm;\r\n","import React, { useState } from \"react\";\r\nimport TodoForm from \"./TodoForm\";\r\nimport TodoList from \"./TodoList\";\r\nimport { RiCloseCircleLine } from \"react-icons/ri\";\r\nimport { TiEdit } from \"react-icons/ti\";\r\n\r\nfunction Todo({ todos, completeTodo, removeTodo, updateTodo }) {\r\n  const [edit, setEdit] = useState({\r\n    id: null,\r\n    value: \"\",\r\n  });\r\n\r\n  const submitUpdate = (value) => {\r\n    updateTodo(edit.id, value);\r\n    setEdit({\r\n      id: null,\r\n      value: \"\",\r\n    });\r\n  };\r\n\r\n  if (edit.id) {\r\n    return <TodoForm edit={edit} onSubmit={submitUpdate} />;\r\n  }\r\n\r\n  return todos.map((todo, index) => (\r\n    <div\r\n      className={todo.isComplete ? \"todo_row complete\" : \"todo_row\"}\r\n      key={index}\r\n    >\r\n      <div key={todo.id} onClick={() => completeTodo(todo.id)}>\r\n        {todo.text}\r\n      </div>\r\n      <div className=\"icons\">\r\n        <RiCloseCircleLine\r\n          onClick={() => {\r\n            removeTodo(todo.id);\r\n          }}\r\n          className=\"delete_icon\"\r\n        />\r\n        <TiEdit\r\n          onClick={() => {\r\n            setEdit({ id: todo.id, value: todo.text });\r\n          }}\r\n          className=\"edit_icon\"\r\n        />\r\n      </div>\r\n    </div>\r\n  ));\r\n}\r\n\r\nexport default Todo;\r\n","import React, { useState } from \"react\";\r\nimport Todo from \"./Todo\";\r\nimport TodoForm from \"./TodoForm\";\r\n\r\nfunction TodoList() {\r\n  const [todos, setTodos] = useState([]);\r\n\r\n  const addTodo = (todo) => {\r\n    if (!todo.text || /^\\s*$/.test(todo.text)) {\r\n      return;\r\n    }\r\n    const newTodos = [todo, ...todos];\r\n\r\n    setTodos(newTodos);\r\n  };\r\n\r\n  const updateTodo = (todoId, newValue) => {\r\n      if(!newValue.text || /^\\s*$/.test(newValue.text)) {\r\n          return\r\n      }\r\n\r\n      setTodos(prev => prev.map(item => (item.id === todoId ? newValue : item)))\r\n  }\r\n\r\n  const removeTodo = (id) => {\r\n    const removeArr = [...todos].filter((todo) => todo.id !== id);\r\n\r\n    setTodos(removeArr);\r\n  };\r\n\r\n\r\n  const completeTodo = (id) => {\r\n    let updatedTodos = todos.map((todo) => {\r\n      if (todo.id === id) {\r\n        todo.isComplete = !todo.isComplete;\r\n      }\r\n      return todo;\r\n    });\r\n    setTodos(updatedTodos);\r\n  };\r\n  return (\r\n    <div>\r\n      <h1>What's the plan for today?</h1>\r\n      <TodoForm onSubmit={addTodo} />\r\n      <Todo todos={todos} completeTodo={completeTodo} removeTodo={removeTodo} updateTodo={updateTodo} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TodoList;\r\n","import './App.css';\nimport TodoList from './components/TodoList';\n\nfunction App() {\n  return (\n    <div className=\"todo_app\">\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}